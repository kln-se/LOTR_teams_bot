import telebot
import datetime as dt
from datetime import datetime
from configparser import ConfigParser
from telebot import types
from telebot.types import BotCommand
import teams
import rating
import plots
import logging
import time

config = ConfigParser()
config.read('config.ini')
bot = telebot.TeleBot(config.get('CONNECTION', 'token'))

players = {}
players_to_play = {}
teams_count = None
last_poll_results = {}
choose_players_btn_callback_names = {}
choose_winners_btn_callback_names = {}
for p in config.options('PLAYERS'):
    players[int(p)] = [str(x) for x in config.get('PLAYERS', p).split(';')]
white_list = [int(x) for x in config.get('SECURITY', 'white_list').split(';')]
admin_list = [int(x) for x in config.get('SECURITY', 'admin_list').split(';')]
contributor = None

start_prompt = '''–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ ¬´–í–ª–∞—Å—Ç–µ–ª—ñ–Ω –ö–æ—Ç–µ—Üüëë¬ª –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚úî –°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞ –æ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ;
‚úî –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–∞–≤—É –∫–æ–º–∞–Ω–¥;
‚úî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏–≥—Ä–æ–∫–æ–≤.
'''

cmds_list = [
    BotCommand(description='–°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞ –æ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ;', command='/start_poll'),
    BotCommand(description='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–±–∏–µ–Ω–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–∞–º;', command='/propose_teams'),
    BotCommand(description='–ò–Ω—Ñ–æ—Ä–≥—Ä–∞—Ñ–∏–∫–∞ —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–≥—Ä–æ–∫–æ–≤;', command='/rating'),
    BotCommand(description='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ –∏ –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É;', command='/add_record'),
    BotCommand(description='–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞;', command='/start'),
    BotCommand(description='C–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç—É;', command='/help')
]

cmds = "/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º;\n" \
       "/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥;\n" \
       "/start_poll - —Å—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞ –æ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ;\n" \
       "/propose_teams - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–±–∏–µ–Ω–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–∞–º;\n" \
       "/rating - –∏–Ω—Ñ–æ—Ä–≥—Ä–∞—Ñ–∏–∫–∞ —Å —Ç–µ–∫—É—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–≥—Ä–æ–∫–æ–≤;\n" \
       "/add_record - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∏–≥—Ä–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É;\n" \
       "/discord - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –≤ Discord."


@bot.message_handler(commands=['start'])
def start_handler(message):
    if check_white_list(message.from_user.id):
        bot.set_my_commands(cmds_list)
        bot.reply_to(message, start_prompt)


@bot.message_handler(commands=['help'])
def help_handler(message):
    if check_white_list(message.from_user.id):
        bot.reply_to(message, cmds)


@bot.message_handler(commands=['discord'])
def discord_handler(message):
    if check_white_list(message.from_user.id):
        bot.reply_to(message, 'https://discord.gg/BsQrgxPZ')


@bot.message_handler(commands=['start_poll'])
def poll_handler(message):
    global last_poll_results
    if check_white_list(message.from_user.id):
        poll_sent = bot.send_poll(
            chat_id=message.chat.id,
            question='–ö—Ç–æ –±—É–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –∏–≥—Ä–∞—Ç—å?',
            options=['‚òëÔ∏è –ë—É–¥—É, –∫–∞–∫ –æ–±—ã—á–Ω–æ –≤ 22:00',
                     'ü§î –ë—É–¥—É, –Ω–æ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å',
                     'üïë –ü—Ä–µ–¥–ª–æ–∂—É –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø–∏—à—É –Ω–∏–∂–µ)',
                     'ü§° –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫ 22:00',
                     'üôÖ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ —Å–º–æ–≥—É'],
            is_anonymous=False,
            allows_multiple_answers=True,
            close_date=datetime.combine(datetime.today().date(), datetime.min.time()),
            reply_to_message_id=message.id
        )
        last_poll_results = {}


@bot.message_handler(commands=['propose_teams'])
def propose_teams_handler(message):
    if check_white_list(message.from_user.id):
        keyboard = types.InlineKeyboardMarkup()
        choose_players_btn = types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤', callback_data='choose_players_btn')
        last_poll_participants_btn = types.InlineKeyboardButton(text='–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞',
                                                                callback_data='last_poll_participants_btn')
        keyboard.add(choose_players_btn, last_poll_participants_btn)
        bot.send_message(chat_id=message.chat.id, text='–ö—Ç–æ –±—É–¥–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–∞—Ö?', reply_markup=keyboard)


@bot.message_handler(commands=['rating'])
def discord_handler(message):
    if check_white_list(message.from_user.id):
        plots.plot_statistics(rating.load_df('statistics_data/statistics.csv'), players)
        with open('statistics_data/statistics.png', 'rb') as photo:
            bot.send_photo(message.chat.id, photo)


@bot.message_handler(commands=['add_record'])
def add_record(message):
    global contributor
    if check_white_list(message.from_user.id):
        contributor = message.from_user.id
        keyboard = types.InlineKeyboardMarkup()
        for p_id in players:
            temp_btn = types.InlineKeyboardButton(text="‚òê " + players[p_id][1],
                                                  callback_data='choose_winner=' + str(p_id))
            keyboard.add(temp_btn)
            choose_winners_btn_callback_names['choose_winner=' + str(p_id)] = False
        finish_winners_choice_btn = types.InlineKeyboardButton(text="¬´–ì–æ—Ç–æ–≤–æ¬ª",
                                                               callback_data='finish_winners_choice_btn')
        keyboard.add(finish_winners_choice_btn)
        bot.send_message(chat_id=message.chat.id,
                         text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:',
                         reply_markup=keyboard)
    else:
        bot.reply_to(message, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.')


@bot.poll_answer_handler()
def handle_poll_answer(poll_answer):
    global last_poll_results
    poll_id = poll_answer.poll_id
    user_id = poll_answer.user.id
    option_ids = poll_answer.option_ids
    last_poll_results[user_id] = option_ids


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global players
    global last_poll_results
    global players_to_play
    global teams_count
    global choose_players_btn_callback_names
    global choose_winners_btn_callback_names
    global contributor

    if call.data == 'choose_players_btn':
        players_to_play = {}
        choose_players_btn_callback_names = {}
        teams_count = None
        keyboard = types.InlineKeyboardMarkup()
        for p_id in players:
            temp_btn = types.InlineKeyboardButton(text="‚òê " + players[p_id][1],
                                                  callback_data='choose_player=' + str(p_id))
            keyboard.add(temp_btn)
            choose_players_btn_callback_names['choose_player=' + str(p_id)] = False
        finish_players_choice_btn = types.InlineKeyboardButton(text="¬´–ì–æ—Ç–æ–≤–æ¬ª",
                                                               callback_data='finish_players_choice_btn')
        keyboard.add(finish_players_choice_btn)
        bot.send_message(chat_id=call.message.chat.id,
                         text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤:',
                         reply_markup=keyboard)
    elif call.data in choose_players_btn_callback_names:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–º—è –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã
        choose_players_btn_callback_names[call.data] = True
        updated_keyboard = types.InlineKeyboardMarkup()
        for player_btn_callback_name in choose_players_btn_callback_names:
            if choose_players_btn_callback_names[player_btn_callback_name]:
                temp_btn = types.InlineKeyboardButton(
                    text="‚òë " + players[int(player_btn_callback_name.split('=')[1])][1],
                    callback_data=player_btn_callback_name)
            else:
                temp_btn = types.InlineKeyboardButton(
                    text="‚òê " + players[int(player_btn_callback_name.split('=')[1])][1],
                    callback_data=player_btn_callback_name)
            updated_keyboard.add(temp_btn)
        finish_players_choice_btn = types.InlineKeyboardButton(text="¬´–ì–æ—Ç–æ–≤–æ¬ª",
                                                               callback_data='finish_players_choice_btn')
        updated_keyboard.add(finish_players_choice_btn)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=updated_keyboard)
    elif call.data in choose_winners_btn_callback_names:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–º—è –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä–æ–∫–æ–≤-–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        choose_winners_btn_callback_names[call.data] = True
        updated_keyboard = types.InlineKeyboardMarkup()
        for winner_btn_callback_name in choose_winners_btn_callback_names:
            if choose_winners_btn_callback_names[winner_btn_callback_name]:
                temp_btn = types.InlineKeyboardButton(
                    text="‚òë " + players[int(winner_btn_callback_name.split('=')[1])][1],
                    callback_data=winner_btn_callback_name)
            else:
                temp_btn = types.InlineKeyboardButton(
                    text="‚òê " + players[int(winner_btn_callback_name.split('=')[1])][1],
                    callback_data=winner_btn_callback_name)
            updated_keyboard.add(temp_btn)
        finish_players_choice_btn = types.InlineKeyboardButton(text="¬´–ì–æ—Ç–æ–≤–æ¬ª",
                                                               callback_data='finish_winners_choice_btn')
        updated_keyboard.add(finish_players_choice_btn)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=updated_keyboard)
    elif call.data == 'finish_players_choice_btn':
        for player_btn_callback_name in choose_players_btn_callback_names:
            if choose_players_btn_callback_names[player_btn_callback_name]:
                players_to_play[int(player_btn_callback_name.split('=')[1])] = \
                    players[int(player_btn_callback_name.split('=')[1])][1]
        keyboard = types.InlineKeyboardMarkup()
        teams_2_btn = types.InlineKeyboardButton(text='2', callback_data='teams_2_btn')
        teams_3_btn = types.InlineKeyboardButton(text='3', callback_data='teams_3_btn')
        teams_4_btn = types.InlineKeyboardButton(text='4', callback_data='teams_4_btn')
        keyboard.add(teams_2_btn, teams_3_btn, teams_4_btn)
        bot.send_message(chat_id=call.message.chat.id,
                         text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {len(players_to_play)}. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∫–æ–º–∞–Ω–¥?',
                         reply_markup=keyboard)
    elif call.data == 'last_poll_participants_btn':
        if last_poll_results:
            players_to_play = {}
            teams_count = None
            for t_id in last_poll_results:
                if 0 in last_poll_results[t_id] or 1 in last_poll_results[t_id]:
                    players_to_play[t_id] = players[t_id][1]
            keyboard = types.InlineKeyboardMarkup()
            teams_2_btn = types.InlineKeyboardButton(text='2', callback_data='teams_2_btn')
            teams_3_btn = types.InlineKeyboardButton(text='3', callback_data='teams_3_btn')
            teams_4_btn = types.InlineKeyboardButton(text='4', callback_data='teams_4_btn')
            keyboard.add(teams_2_btn, teams_3_btn, teams_4_btn)
            bot.send_message(chat_id=call.message.chat.id,
                             text=f'–°—É–¥—è –ø–æ –æ–ø—Ä–æ—Å—É –∏–≥—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç: {len(players_to_play)}. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∫–æ–º–∞–Ω–¥?',
                             reply_markup=keyboard)
        else:
            bot.send_message(chat_id=call.message.chat.id, text='–û–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å.')
    elif call.data == 'teams_2_btn':
        teams_count = 2
        keyboard = types.InlineKeyboardMarkup()
        regen_teams_btn = types.InlineKeyboardButton(text='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã', callback_data='regen_teams_btn')
        keyboard.add(regen_teams_btn)
        bot.send_message(chat_id=call.message.chat.id, text=teams.random_teamer(players_to_play.copy(), teams_count),
                         reply_markup=keyboard)
    elif call.data == 'teams_3_btn':
        teams_count = 3
        keyboard = types.InlineKeyboardMarkup()
        regen_teams_btn = types.InlineKeyboardButton(text='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã', callback_data='regen_teams_btn')
        keyboard.add(regen_teams_btn)
        bot.send_message(chat_id=call.message.chat.id, text=teams.random_teamer(players_to_play.copy(), teams_count),
                         reply_markup=keyboard)
    elif call.data == 'teams_4_btn':
        teams_count = 4
        keyboard = types.InlineKeyboardMarkup()
        regen_teams_btn = types.InlineKeyboardButton(text='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã', callback_data='regen_teams_btn')
        keyboard.add(regen_teams_btn)
        bot.send_message(chat_id=call.message.chat.id, text=teams.random_teamer(players_to_play.copy(), teams_count),
                         reply_markup=keyboard)
    elif call.data == 'regen_teams_btn':
        if teams_count == None or len(players_to_play) == 0:
            bot.send_message(chat_id=call.message.chat.id,
                             text='–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥.')
        else:
            keyboard = types.InlineKeyboardMarkup()
            regen_teams_btn = types.InlineKeyboardButton(text='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã', callback_data='regen_teams_btn')
            keyboard.add(regen_teams_btn)
            bot.send_message(chat_id=call.message.chat.id,
                             text=teams.random_teamer(players_to_play.copy(), teams_count),
                             reply_markup=keyboard)
    elif call.data == 'finish_winners_choice_btn':
        winners = {}
        for winner_btn_callback_name in choose_winners_btn_callback_names:
            if choose_winners_btn_callback_names[winner_btn_callback_name]:
                winners[int(winner_btn_callback_name.split('=')[1])] = True
            else:
                winners[int(winner_btn_callback_name.split('=')[1])] = False
        if choose_winners_btn_callback_names:
            df = rating.load_df('statistics_data/statistics.csv')
            rating.add_record(df, dt.datetime.now(), contributor, winners)
            rating.save_df(df, 'statistics_data/statistics.csv')
            contributor = None
            choose_winners_btn_callback_names = {}
            bot.send_message(chat_id=call.message.chat.id, text='–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.')
        else:
            bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.')


def check_white_list(user_id) -> bool:
    if user_id in white_list:
        return True
    else:
        return False


def check_admin_list(user_id) -> bool:
    if user_id in admin_list:
        return True
    else:
        return False


if __name__ == "__main__":
    logging.basicConfig(filename='errors.log', level=logging.ERROR)
    while True:
        time.sleep(5)
        try:
            print("bot started...")
            bot.polling(none_stop=True, interval=1)
        except Exception as e:
            logging.exception(e)

