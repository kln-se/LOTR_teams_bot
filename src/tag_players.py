import datetime
import schedule
import threading
import time
from telebot import types
from telebot.apihelper import ApiTelegramException
import src.choose_players  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è callback 'choose_players_btn', callback 'choose_last_poll_participants_btn'
from src.access import check_white_list_decorator, check_admin_list_decorator
from src.bot import get_bot_instance
from src.parse_config import get_players
from src.storage import MemoryStorage

bot = get_bot_instance()
schedule_lock = threading.Lock()


@bot.message_handler(commands=['active_threads'])
@check_admin_list_decorator(bot_instance=bot)
def active_threads_handler(message):
    bot.send_message(chat_id=message.chat.id,
                     text='\n'.join([f'{idx + 1} {str(t)}' for idx, t in enumerate(threading.enumerate())]))


@bot.message_handler(commands=['active_jobs'])
@check_admin_list_decorator(bot_instance=bot)
def active_jobs_handler(message):
    if schedule.jobs:
        bot.send_message(chat_id=message.chat.id,
                         text='\n'.join([f'{idx + 1} {str(j)}' for idx, j in enumerate(schedule.jobs)]))
    else:
        bot.send_message(chat_id=message.chat.id,
                         text=len(schedule.jobs))


@bot.message_handler(commands=['tag_players'])
@check_white_list_decorator(bot_instance=bot)
def tag_players_handler(message):
    MemoryStorage.get_instance(message.chat.id).callback_func_ref = start_tag_players

    keyboard = types.InlineKeyboardMarkup()
    choose_players_btn = types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤', callback_data='choose_players_btn')
    last_poll_participants_btn = types.InlineKeyboardButton(text='–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞',
                                                            callback_data='choose_last_poll_participants_btn')
    keyboard.add(choose_players_btn, last_poll_participants_btn)

    bot.send_message(chat_id=message.chat.id, text='–ö–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?',
                     reply_markup=keyboard)


@bot.message_handler(commands=['stop_all_notifications'])
@check_admin_list_decorator(bot_instance=bot)
def stop_all_notifications_handler(message):
    chat_inst = MemoryStorage.get_instance(message.chat.id)
    if chat_inst.notification_thread and chat_inst.notification_thread.is_alive():
        stop_thread(message)

        with chat_inst.lock:
            chat_inst.subscribed_players = {}
            chat_inst.not_polled_players = {}

        bot.reply_to(message, f'üîï –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.'
                              f'\n‚ùóÔ∏è–ü–æ—Ç–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n'
                              f'\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:'
                              f'\n\t- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á schedule –≤—Å–µ–≥–æ: {len(schedule.jobs)}'
                              f'\n\t- –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ threads –≤—Å–µ–≥–æ: {threading.active_count()}')
    else:
        bot.reply_to(message, '‚ùóÔ∏è–ü–æ—Ç–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω.')


@bot.callback_query_handler(func=lambda call: call.data == 'unsubscribe_btn')
def handle_unsubscribe_btn(call):
    unsubscribe_player(call)


def start_tag_players(call, chosen_players):
    chat_inst = MemoryStorage.get_instance(call.message.chat.id)
    if chosen_players:
        with chat_inst.lock:
            chat_inst.subscribed_players = chosen_players

            # –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –≤ schedule
            if 'tag_players_job' in chat_inst.started_jobs:
                schedule.cancel_job(chat_inst.started_jobs.pop('tag_players_job'))

            # –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ schedule
            if datetime.datetime.now().time() < datetime.time(23, 59, 59):
                chat_inst.started_jobs['tag_players_job'] = \
                    schedule.every(60).seconds.do(send_notification,
                                                  call.message,
                                                  players_to_notify=chat_inst.subscribed_players,
                                                  header='üîî –°–æ–±–∏—Ä–∞–µ–º—Å—è –≤ Discord! –í—ã –≥–¥–µ?\n\n–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏:',
                                                  last_notification_msg_id=[chat_inst.tag_players_msg_id],
                                                  show_unsubscribe_btn=True).until("23:59:59")

        # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω
        if not chat_inst.notification_thread or not chat_inst.notification_thread.is_alive():
            chat_inst.stop_event = threading.Event()
            chat_inst.notification_thread = threading.Thread(target=worker,
                                                             args=(call.message,),
                                                             name=f'PlayersNotificationThread:{call.message.chat.id}',
                                                             daemon=True)
            chat_inst.notification_thread.start()

        bot.send_message(chat_id=call.message.chat.id,
                         text=create_prompt(chat_inst.subscribed_players,
                                            f'\n‚ùï@{call.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ '
                                            f'–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥.\n'
                                            f'\n–°–ª–µ–¥—É—é—â–∏–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:')
                         )
    else:
        bot.send_message(chat_id=call.message.chat.id, text='‚ùó–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤, —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.')


def start_tag_not_polled_players(message, not_polled_players):
    chat_inst = MemoryStorage.get_instance(message.chat.id)
    with chat_inst.lock:
        chat_inst.not_polled_players = not_polled_players

        # –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –≤ schedule
        if 'tag_not_polled_players_job' in chat_inst.started_jobs:
            schedule.cancel_job(chat_inst.started_jobs.pop('tag_not_polled_players_job'))

        # –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ schedule
        # –ë–æ—Ç –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        if datetime.datetime.now().time() < datetime.time(22, 30, 00):
            chat_inst.started_jobs['tag_not_polled_players_job'] = \
                schedule.every(15).minutes.do(send_notification,
                                              message,
                                              players_to_notify=chat_inst.not_polled_players,
                                              header='üîî –ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º –æ–ø—Ä–æ—Å–µ!\n\n–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏:',
                                              last_notification_msg_id=[chat_inst.not_polled_players_msg_id],
                                              show_unsubscribe_btn=False).until("22:30:00")

    # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω
    if not chat_inst.notification_thread or not chat_inst.notification_thread.is_alive():
        chat_inst.stop_event = threading.Event()
        chat_inst.notification_thread = threading.Thread(target=worker,
                                                         args=(message,),
                                                         name=f'PlayersNotificationThread:{message.chat.id}',
                                                         daemon=True)
        chat_inst.notification_thread.start()


def send_notification(message, players_to_notify, header, last_notification_msg_id, show_unsubscribe_btn=False):
    # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —á–∞—Ç–∞ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
    if last_notification_msg_id[0]:
        try:
            bot.delete_message(chat_id=message.chat.id, message_id=last_notification_msg_id)
        except ApiTelegramException:
            pass

    if show_unsubscribe_btn:
        keyboard = types.InlineKeyboardMarkup()
        unsubscribe_btn = types.InlineKeyboardButton(text='–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data='unsubscribe_btn')
        keyboard.add(unsubscribe_btn)
        t_info = threading.current_thread()
        notification_msg = bot.send_message(chat_id=message.chat.id,
                                            text=create_prompt(players_to_notify, header),
                                            reply_markup=keyboard)
    else:
        notification_msg = bot.send_message(chat_id=message.chat.id,
                                            text=create_prompt(players_to_notify, header))
    # –≠–º—É–ª—è—Ü–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç list
    last_notification_msg_id[0] = notification_msg.message_id


def create_prompt(players_to_notify, header):
    players = get_players()
    s = header
    for player_id in players_to_notify:
        if players_to_notify[player_id]:
            s += f'\n\t- {players[int(player_id)][0]}'
    return s


def worker(message):
    chat_inst = MemoryStorage.get_instance(message.chat.id)
    while not chat_inst.stop_event.is_set():
        with chat_inst.lock:
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ subscribed_players –ø—É—Å—Ç, –∞ –∑–∞–¥–∞—á–∞ –≤ started_jobs –µ—Å—Ç—å
            if not sum(chat_inst.subscribed_players.values()) and 'tag_players_job' in chat_inst.started_jobs:

                schedule.cancel_job(chat_inst.started_jobs.pop('tag_players_job'))
                bot.send_message(chat_id=message.chat.id,
                                 text='üîï –ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')

            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ø–æ timeout (—É—Å–ª–æ–≤–∏–µ .until()) –∏ –≤ schedule.jobs –µ—ë –Ω–µ—Ç
            elif 'tag_players_job' in chat_inst.started_jobs and \
                    chat_inst.started_jobs['tag_players_job'] not in schedule.jobs:

                chat_inst.subscribed_players = {}
                del chat_inst.started_jobs['tag_players_job']

                bot.send_message(chat_id=message.chat.id,
                                 text='üîï –ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (timeout).')

            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ not_polled_players –ø—É—Å—Ç, –∞ –∑–∞–¥–∞—á–∞ –≤ started_jobs –µ—Å—Ç—å
            if not sum(chat_inst.not_polled_players.values()) and \
                    'tag_not_polled_players_job' in chat_inst.started_jobs:

                schedule.cancel_job(chat_inst.started_jobs.pop('tag_not_polled_players_job'))
                bot.send_message(chat_id=message.chat.id,
                                 text='üîï –ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏–º –∏–≥—Ä–æ–∫–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')

            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ø–æ timeout (—É—Å–ª–æ–≤–∏–µ .until()) –∏ –≤ schedule.jobs –µ—ë –Ω–µ—Ç
            elif 'tag_not_polled_players_job' in chat_inst.started_jobs and \
                    chat_inst.started_jobs['tag_not_polled_players_job'] not in schedule.jobs:

                chat_inst.not_polled_players = {}
                del chat_inst.started_jobs['tag_not_polled_players_job']

                bot.send_message(chat_id=message.chat.id,
                                 text='üîï –ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏–º –∏–≥—Ä–æ–∫–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (timeout).')

            # –ï—Å–ª–∏ –±–æ–ª–µ–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            if not chat_inst.started_jobs:
                chat_inst.stop_event.set()

        with schedule_lock:
            schedule.run_pending()
        time.sleep(1)


def unsubscribe_player(call):
    chat_inst = MemoryStorage.get_instance(call.message.chat.id)
    with chat_inst.lock:
        if 'tag_players_job' not in chat_inst.started_jobs:
            bot.send_message(chat_id=call.message.chat.id,
                             text=f'‚ùó@{call.from_user.username}, —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç. –ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π '
                                  f'–≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.')
        elif str(call.from_user.id) in chat_inst.subscribed_players and \
                chat_inst.subscribed_players[str(call.from_user.id)]:
            chat_inst.subscribed_players[str(call.from_user.id)] = False
            bot.send_message(chat_id=call.message.chat.id,
                             text=f'‚ùï–ò–≥—Ä–æ–∫ @{call.from_user.username} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.')

        else:
            bot.send_message(chat_id=call.message.chat.id,
                             text=f'‚ùï–ò–≥—Ä–æ–∫ @{call.from_user.username} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ '
                                  f'—Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.')


def unsubscribe_polled_player(chat_id, user):
    chat_inst = MemoryStorage.get_instance(chat_id)
    with chat_inst.lock:
        if 'tag_not_polled_players_job' not in chat_inst.started_jobs:
            pass
        elif not chat_inst.not_polled_players[str(user.id)]:
            bot.send_message(chat_id=chat_id,
                             text=f'‚ùï–ò–≥—Ä–æ–∫ {get_players()[user.id][0]} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ –≤ –æ–ø—Ä–æ—Å–µ.')
        else:
            chat_inst.not_polled_players[str(user.id)] = False
            bot.send_message(chat_id=chat_id,
                             text=f'‚ùï–ò–≥—Ä–æ–∫ {get_players()[user.id][0]} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –≤ –æ–ø—Ä–æ—Å–µ.')


# –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–æ–∑–≤–∞–ª –≥–æ–ª–æ—Å
def subscribe_retracted_player(chat_id, user):
    chat_inst = MemoryStorage.get_instance(chat_id)
    with chat_inst.lock:
        if 'tag_not_polled_players_job' in chat_inst.started_jobs:
            chat_inst.not_polled_players[str(user.id)] = True
            bot.send_message(chat_id=chat_id,
                             text=f'‚ùï–ò–≥—Ä–æ–∫ {get_players()[user.id][0]} –æ—Ç–æ–∑–≤–∞–ª –≥–æ–ª–æ—Å.')


def stop_thread(message):
    chat_inst = MemoryStorage.get_instance(message.chat.id)
    chat_inst.stop_event.set()
    with chat_inst.lock:
        # –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤ schedule
        for job_name in list(chat_inst.started_jobs.keys()):
            schedule.cancel_job(chat_inst.started_jobs.pop(job_name))

    chat_inst.notification_thread.join()  # –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
    chat_inst.notification_thread = None
    chat_inst.stop_event = None
