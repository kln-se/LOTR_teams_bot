from datetime import datetime
from src.access import check_white_list_decorator
from src.bot import get_bot_instance
from src.teams import choose_team_num
from src.storage import MemoryStorage

bot = get_bot_instance()


@bot.message_handler(commands=['start_poll'])
@check_white_list_decorator(bot_instance=bot)
def poll_handler(message):
    poll = bot.send_poll(
        chat_id=message.chat.id,
        question='–ö—Ç–æ –±—É–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –∏–≥—Ä–∞—Ç—å?',
        options=['‚òëÔ∏è –ë—É–¥—É, –∫–∞–∫ –æ–±—ã—á–Ω–æ –≤ 22:00',
                 'ü§î –ë—É–¥—É, –Ω–æ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å',
                 'üïë –ü—Ä–µ–¥–ª–æ–∂—É –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø–∏—à—É –Ω–∏–∂–µ)',
                 'ü§° –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫ 22:00',
                 'üôÖ‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ —Å–º–æ–≥—É'],
        is_anonymous=False,
        allows_multiple_answers=False,
        close_date=datetime.combine(datetime.today().date(), datetime.min.time()),
        reply_to_message_id=message.id
    )
    MemoryStorage.polls_locations[poll.poll.id] = message.chat.id
    MemoryStorage.get_instance(message.chat.id).last_poll_results = {}

    if MemoryStorage.get_instance(message.chat.id).last_poll_message_id:
        bot.unpin_chat_message(message.chat.id, MemoryStorage.get_instance(message.chat.id).last_poll_message_id)
    MemoryStorage.get_instance(message.chat.id).last_poll_message_id = poll.message_id
    bot.pin_chat_message(message.chat.id, poll.message_id)


@bot.message_handler(commands=['no_clowns_poll'])
@check_white_list_decorator(bot_instance=bot)
def poll_handler(message):
    poll = bot.send_poll(
        chat_id=message.chat.id,
        question='–°–µ–≥–æ–¥–Ω—è –∫–ª–æ—É–Ω–æ–≤ –Ω–µ –±—É–¥–µ—Ç))) –ö—Ç–æ –±—É–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –∏–≥—Ä–∞—Ç—å –≤ –í–ö? –ì–æ–ª–æ—Å—É—é—Ç –≤—Å–µ!!!\n¬©–î–º–∏—Ç—Ä–æ',
        options=['üëç –ë—É–¥—É, –µ—Å–ª–∏ –Ω–∞–±–µ—Ä—ë—Ç—Å—è —Ö–æ—Ç—è –±—ã 5 —á–µ–ª–æ–≤–µ–∫',
                 'üëé –ù–µ –±—É–¥—É, –Ω–æ –Ω–∏–∂–µ –Ω–∞–ø–∏—à—É –ø—Ä–∏—á–∏–Ω—É —Ç–æ–≥–æ, –ø–æ—á–µ–º—É —è –ø—Ä–æ–ø—É—Å–∫–∞—é —Ç–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –∫–∞—Ç–∫–∏ –≤ –í–ö)'],
        is_anonymous=False,
        allows_multiple_answers=False,
        close_date=datetime.combine(datetime.today().date(), datetime.min.time()),
        reply_to_message_id=message.id
    )

    if MemoryStorage.get_instance(message.chat.id).last_poll_message_id:
        bot.unpin_chat_message(message.chat.id, MemoryStorage.get_instance(message.chat.id).last_poll_message_id)
    MemoryStorage.get_instance(message.chat.id).last_poll_message_id = poll.message_id
    bot.pin_chat_message(message.chat.id, poll.message_id)


@bot.callback_query_handler(func=lambda call: call.data == 'last_poll_participants_btn')
def handle_last_poll_participants_btn(call):
    if MemoryStorage.get_instance(call.message.chat.id).last_poll_results:
        polled_players = {}
        for player_id in MemoryStorage.get_instance(call.message.chat.id).last_poll_results:
            if 0 in MemoryStorage.get_instance(call.message.chat.id).last_poll_results[player_id] or 1 in \
                    MemoryStorage.get_instance(call.message.chat.id).last_poll_results[player_id]:
                polled_players[player_id] = True
            else:
                polled_players[player_id] = False

        bot.send_message(chat_id=call.message.chat.id,
                         text=f'–°—É–¥—è –ø–æ –æ–ø—Ä–æ—Å—É –∏–≥—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç: *{len(polled_players)}* '
                              f'(–ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ª—é–±–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ "–ë—É–¥—É, ...")',
                         parse_mode='Markdown')

        callback_func = MemoryStorage.get_instance(call.message.chat.id).callback_func_ref
        if callback_func:
            callback_func(call.message, polled_players)
    else:
        bot.send_message(chat_id=call.message.chat.id,
                         text='–û–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å.')


@bot.poll_answer_handler()
def handle_poll_answer(poll_answer):
    poll_id = poll_answer.poll_id
    player_id = poll_answer.user.id
    option_ids = poll_answer.option_ids
    chat_id = MemoryStorage.get_poll_location(poll_id)
    MemoryStorage.get_instance(chat_id).last_poll_results[player_id] = option_ids
